import Head from 'next/head';
import Image from 'next/image';
import { useIntl } from 'react-intl';
import { useState, useEffect } from 'react';
import { Check, MinusCircle, PlusCircle } from 'react-feather';

import Loading from '../../public/dummy/product-loading.png';

import { translate } from '../../translations/Translations';
import styles from '../../styles/Product.module.css';

import { getProductIds, getProductById, getProductImagesById } from '../api/services';
import { useWindowDimensions } from '../../utilities/customHooks';
import { useStateContext } from '../../utilities/StateContext';

import Header from '../../components/Header';
import Footer from '../../components/Footer';

import { Radio } from '../../components/Utilities';
import BestSelling from '../../components/BestSelling';

function Product({ product }) {
    const intl = useIntl();
    const [ { cart }, dispatch ] = useStateContext();

    const iconSize = 22;
    const { width, height } = useWindowDimensions();
    const [ sidebar, setSidebar ] = useState(false);
    const [ animate, setAnimate ] = useState('');

    const [ selectedSize, setSelectedSize ] = useState(product.sizes[0]);
    const [ selectedQuantity, setSelectedQuantity ] = useState(1);
    const [ selectedMessage, setSelectedMessage ] = useState('');

    // get images
    useEffect(async () => {
        const content = await getProductImagesById(product.id);
        product.images = content;
    }, [product]);
    
    // change button animation
    useEffect(() => {
        if (animate === 'animate') {
            const interval = setInterval(() => {
                setAnimate('');
            }, 2000);

            return () => clearInterval(interval);
        }
    }, [animate]);

    // add to cart
    const addToCart = () => {
        dispatch({
            type: 'ADD_CART',
            item: {
                id: product.id,
                name: product.name,
                name_zh: product.name_zh,
                size: selectedSize,
                quantity: selectedQuantity,
                price: product.prices.find(item => item.size === selectedSize).price,
                message: selectedMessage,
            }
        });

        setAnimate('animate');
    };

    return (
        <div style={{ height: `${height}px`, width: '100vw', overflow: sidebar ? 'hidden' : 'visible', display: 'flex', flexDirection: 'column' }}>
            <Head>
                <title>Italian Tomato | {product.name}</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <Header open={sidebar} setOpen={setSidebar} />

            <main className={styles.container}>
                <section className={styles.product}>
                    
                    {/* product image */}
                    <div className={styles.image}>
                        {product?.images ? <img src={product?.images?.find(item => item.includes(selectedSize.replace(' ', '')))} alt={product?.id} /> : <Image src={Loading} alt='product-loading' />}
                    </div>

                    {/* product details */}
                    <div className={styles.details}>
                        <h1>{intl.locale === 'en' ? product.name : product.name_zh}</h1>
                        
                        {/* product code */}
                        <span>
                            <p weight='bold'>{translate('product_code').toUpperCase()}</p>
                            <p>{product?.codes.find(item => item.size === selectedSize)?.code}</p>
                        </span>

                        {/* key ingredients */}
                        <span>
                            <p weight='bold'>{translate('key_ingredients').toUpperCase()}</p>
                            <div>
                                {product?.ingredients.map(item => (
                                    <p key={item.id}>{intl.locale === 'en' ? item.en : item.zh}</p>
                                ))}
                            </div>
                        </span>

                        {/* sizes */}
                        <span name='size'>
                            <p weight='bold'>{translate('size').toUpperCase()}</p>
                            <div>
                                {product?.sizes.map(item => (
                                    <Radio key={item} label={item} value={item} name={item} checked={selectedSize} onChange={setSelectedSize} />
                                ))}
                            </div>
                        </span>

                        {/* quantity */}
                        <span name='quantity'>
                            <p weight='bold'>{translate('quantity').toUpperCase()}</p>
                            <div>
                                <span onClick={() => setSelectedQuantity(Math.max(1, selectedQuantity - 1))}><MinusCircle width={iconSize} /></span>
                                <input type='text' value={selectedQuantity} onChange={(e) => setSelectedQuantity(Math.max(1, Math.min(e.target.value, 10)))} />
                                <span onClick={() => setSelectedQuantity(Math.min(selectedQuantity + 1, 10))}><PlusCircle width={iconSize} /></span>
                            </div>
                        </span>

                        {/* price */}
                        <span>
                            <p weight='bold'>{translate('price').toUpperCase()}</p>
                            <p>HK$ {product?.prices.find(item => item.size === selectedSize)?.price}</p>
                        </span>

                        {/* message */}
                        <span name='message'>
                            <p weight='bold'>{translate('birthday_message').toUpperCase()}</p>
                            <input type='text' value={selectedMessage} placeholder={translate('birthday_message_placeholder')} onChange={(e) => setSelectedMessage(e.target.value)} />
                        </span>

                        {/* add to cart */}
                        <button onClick={() => addToCart()} status={animate}>
                            <span>{translate('add_to_cart')}</span>
                            <div><Check width={iconSize} /></div>
                        </button>
                    </div>
                </section>

                {/* best selling */}
                <BestSelling />
            </main>

            <Footer />
        </div>
    );
}

export async function getStaticPaths() {
    const ids = await getProductIds();
    let paths = [];

    ids.forEach(item => {
        paths.push({ params: { pid: item.id }});
        paths.push({ params: { pid: item.id }, locale: 'en' });
        paths.push({ params: { pid: item.id }, locale: 'zh' });
    });

    return { paths, fallback: false };
}

export async function getStaticProps({ params }) {
    const product = await getProductById(params.pid);
    
    return { props: { product }};
}

export default Product;
